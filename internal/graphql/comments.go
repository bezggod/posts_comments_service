package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	domain "posts_commets_service/internal/domain/models"
	"posts_commets_service/internal/models"
)

// ID is the resolver for the id field.
func (r *commentResolver) ID(ctx context.Context, obj *domain.Comment) (int, error) {
	return int(obj.ID), nil
}

// PostID is the resolver for the postID field.
func (r *commentResolver) PostID(ctx context.Context, obj *domain.Comment) (int, error) {
	return int(obj.PostID), nil
}

// UserID is the resolver for the userID field.
func (r *commentResolver) UserID(ctx context.Context, obj *domain.Comment) (int, error) {
	return int(obj.UserID), nil
}

// ParentCommentID is the resolver for the parentCommentID field.
func (r *commentResolver) ParentCommentID(ctx context.Context, obj *domain.Comment) (*int, error) {
	if obj.ParentCommentID == nil {
		return nil, nil
	}
	v := int(*obj.ParentCommentID)
	return &v, nil
}

// FirstCommentID is the resolver for the firstCommentID field.
func (r *commentResolver) FirstCommentID(ctx context.Context, obj *domain.Comment) (*int, error) {
	if obj.FirstCommentID == 0 {
		return nil, nil
	}
	v := int(obj.FirstCommentID)
	return &v, nil
}

// Replies is the resolver for the replies field.
func (r *commentResolver) Replies(ctx context.Context, obj *domain.Comment) ([]*domain.Comment, error) {
	comments, _, err := r.CommentUC.ListThreads(ctx, obj.PostID, obj.FirstCommentID, 100, nil)
	return comments, err
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input models.InputComment) (*domain.Comment, error) {
	if input.ParentCommentID != nil && *input.ParentCommentID > 0 {
		return r.CommentUC.CreateReplyComment(
			ctx,
			domain.PostID(input.PostID),
			domain.UserID(input.UserID),
			domain.CommentID(*input.ParentCommentID), // разыменовали
			input.Text,
		)
	}
	return r.CommentUC.CreateRoot(
		ctx,
		domain.PostID(input.PostID),
		domain.UserID(input.UserID),
		input.Text,
	)
}

// ListRoots is the resolver for the listRoots field.
func (r *queryResolver) ListRoots(ctx context.Context, postID int, limit *int, lastID *int) ([]*domain.Comment, error) {
	var l int
	if limit != nil {
		l = *limit
	}
	var lid *domain.CommentID
	if lastID != nil {
		tmp := domain.CommentID(*lastID)
		lid = &tmp
	}
	cs, _, err := r.CommentUC.ListRoots(ctx, domain.PostID(postID), l, lid)
	return cs, err
}

// ListThreads is the resolver for the listThreads field.
func (r *queryResolver) ListThreads(ctx context.Context, postID int, firstCommentID int, limit *int, lastID *int) ([]*domain.Comment, error) {
	var l int
	if limit != nil {
		l = *limit
	}
	var lid *domain.CommentID
	if lastID != nil {
		tmp := domain.CommentID(*lastID)
		lid = &tmp
	}
	cs, _, err := r.CommentUC.ListThreads(ctx, domain.PostID(postID), domain.CommentID(firstCommentID), l, lid)
	return cs, err
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

type commentResolver struct{ *Resolver }
