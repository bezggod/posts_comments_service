package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	domain "posts_commets_service/internal/domain/models"
	"posts_commets_service/internal/models"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input models.InputPost) (*domain.Post, error) {
	return r.PostUC.Create(ctx, domain.UserID(input.UserID), input.Title, input.Body, boolOrFalse(input.CommentBlock))
}

// ID is the resolver for the id field.
func (r *postResolver) ID(ctx context.Context, obj *domain.Post) (int, error) {
	return int(obj.ID), nil
}

// UserID is the resolver for the userID field.
func (r *postResolver) UserID(ctx context.Context, obj *domain.Post) (int, error) {
	return int(obj.UserID), nil
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, id int) (*domain.Post, error) {
	return r.PostUC.GetByID(ctx, domain.PostID(id))
}

// ListPosts is the resolver for the listPosts field.
func (r *queryResolver) ListPosts(ctx context.Context, limit *int, lastID *int) (*models.PostsPage, error) {
	var l int
	if limit != nil {
		l = *limit
	}

	var lid *domain.PostID
	if lastID != nil {
		tmp := domain.PostID(*lastID)
		lid = &tmp
	}

	posts, next, err := r.PostUC.ListPosts(ctx, l, lid)
	if err != nil {
		return nil, err
	}

	return &models.PostsPage{
		Posts:  posts,
		NextID: toIntPtr(next),
	}, nil
}

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

type postResolver struct{ *Resolver }
