// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "posts_commets_service/internal/domain/models"
)

// PostRepo is an autogenerated mock type for the PostRepo type
type PostRepo struct {
	mock.Mock
}

type PostRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *PostRepo) EXPECT() *PostRepo_Expecter {
	return &PostRepo_Expecter{mock: &_m.Mock}
}

// CommentBlock provides a mock function with given fields: ctx, id, off
func (_m *PostRepo) CommentBlock(ctx context.Context, id models.PostID, off bool) error {
	ret := _m.Called(ctx, id, off)

	if len(ret) == 0 {
		panic("no return value specified for CommentBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PostID, bool) error); ok {
		r0 = rf(ctx, id, off)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostRepo_CommentBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommentBlock'
type PostRepo_CommentBlock_Call struct {
	*mock.Call
}

// CommentBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - id models.PostID
//   - off bool
func (_e *PostRepo_Expecter) CommentBlock(ctx interface{}, id interface{}, off interface{}) *PostRepo_CommentBlock_Call {
	return &PostRepo_CommentBlock_Call{Call: _e.mock.On("CommentBlock", ctx, id, off)}
}

func (_c *PostRepo_CommentBlock_Call) Run(run func(ctx context.Context, id models.PostID, off bool)) *PostRepo_CommentBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PostID), args[2].(bool))
	})
	return _c
}

func (_c *PostRepo_CommentBlock_Call) Return(_a0 error) *PostRepo_CommentBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostRepo_CommentBlock_Call) RunAndReturn(run func(context.Context, models.PostID, bool) error) *PostRepo_CommentBlock_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, userID, title, body, commentBlock
func (_m *PostRepo) Create(ctx context.Context, userID models.UserID, title string, body string, commentBlock bool) (*models.Post, error) {
	ret := _m.Called(ctx, userID, title, body, commentBlock)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID, string, string, bool) (*models.Post, error)); ok {
		return rf(ctx, userID, title, body, commentBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID, string, string, bool) *models.Post); ok {
		r0 = rf(ctx, userID, title, body, commentBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID, string, string, bool) error); ok {
		r1 = rf(ctx, userID, title, body, commentBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PostRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - userID models.UserID
//   - title string
//   - body string
//   - commentBlock bool
func (_e *PostRepo_Expecter) Create(ctx interface{}, userID interface{}, title interface{}, body interface{}, commentBlock interface{}) *PostRepo_Create_Call {
	return &PostRepo_Create_Call{Call: _e.mock.On("Create", ctx, userID, title, body, commentBlock)}
}

func (_c *PostRepo_Create_Call) Run(run func(ctx context.Context, userID models.UserID, title string, body string, commentBlock bool)) *PostRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserID), args[2].(string), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *PostRepo_Create_Call) Return(_a0 *models.Post, _a1 error) *PostRepo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostRepo_Create_Call) RunAndReturn(run func(context.Context, models.UserID, string, string, bool) (*models.Post, error)) *PostRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *PostRepo) GetByID(ctx context.Context, id models.PostID) (*models.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PostID) (*models.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PostID) *models.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PostID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type PostRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id models.PostID
func (_e *PostRepo_Expecter) GetByID(ctx interface{}, id interface{}) *PostRepo_GetByID_Call {
	return &PostRepo_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *PostRepo_GetByID_Call) Run(run func(ctx context.Context, id models.PostID)) *PostRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PostID))
	})
	return _c
}

func (_c *PostRepo_GetByID_Call) Return(_a0 *models.Post, _a1 error) *PostRepo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostRepo_GetByID_Call) RunAndReturn(run func(context.Context, models.PostID) (*models.Post, error)) *PostRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListPosts provides a mock function with given fields: ctx, limit, lastID
func (_m *PostRepo) ListPosts(ctx context.Context, limit int, lastID *models.PostID) ([]*models.Post, *models.PostID, error) {
	ret := _m.Called(ctx, limit, lastID)

	if len(ret) == 0 {
		panic("no return value specified for ListPosts")
	}

	var r0 []*models.Post
	var r1 *models.PostID
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.PostID) ([]*models.Post, *models.PostID, error)); ok {
		return rf(ctx, limit, lastID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.PostID) []*models.Post); ok {
		r0 = rf(ctx, limit, lastID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *models.PostID) *models.PostID); ok {
		r1 = rf(ctx, limit, lastID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.PostID)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, *models.PostID) error); ok {
		r2 = rf(ctx, limit, lastID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PostRepo_ListPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPosts'
type PostRepo_ListPosts_Call struct {
	*mock.Call
}

// ListPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - lastID *models.PostID
func (_e *PostRepo_Expecter) ListPosts(ctx interface{}, limit interface{}, lastID interface{}) *PostRepo_ListPosts_Call {
	return &PostRepo_ListPosts_Call{Call: _e.mock.On("ListPosts", ctx, limit, lastID)}
}

func (_c *PostRepo_ListPosts_Call) Run(run func(ctx context.Context, limit int, lastID *models.PostID)) *PostRepo_ListPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*models.PostID))
	})
	return _c
}

func (_c *PostRepo_ListPosts_Call) Return(_a0 []*models.Post, _a1 *models.PostID, _a2 error) *PostRepo_ListPosts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *PostRepo_ListPosts_Call) RunAndReturn(run func(context.Context, int, *models.PostID) ([]*models.Post, *models.PostID, error)) *PostRepo_ListPosts_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostRepo creates a new instance of PostRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostRepo {
	mock := &PostRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
