// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "posts_commets_service/internal/domain/models"
)

// CommentRepo is an autogenerated mock type for the CommentRepo type
type CommentRepo struct {
	mock.Mock
}

type CommentRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentRepo) EXPECT() *CommentRepo_Expecter {
	return &CommentRepo_Expecter{mock: &_m.Mock}
}

// CreateReplyComment provides a mock function with given fields: ctx, postID, userID, parentCommentID, text
func (_m *CommentRepo) CreateReplyComment(ctx context.Context, postID models.PostID, userID models.UserID, parentCommentID models.CommentID, text string) (*models.Comment, error) {
	ret := _m.Called(ctx, postID, userID, parentCommentID, text)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplyComment")
	}

	var r0 *models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PostID, models.UserID, models.CommentID, string) (*models.Comment, error)); ok {
		return rf(ctx, postID, userID, parentCommentID, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PostID, models.UserID, models.CommentID, string) *models.Comment); ok {
		r0 = rf(ctx, postID, userID, parentCommentID, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PostID, models.UserID, models.CommentID, string) error); ok {
		r1 = rf(ctx, postID, userID, parentCommentID, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepo_CreateReplyComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReplyComment'
type CommentRepo_CreateReplyComment_Call struct {
	*mock.Call
}

// CreateReplyComment is a helper method to define mock.On call
//   - ctx context.Context
//   - postID models.PostID
//   - userID models.UserID
//   - parentCommentID models.CommentID
//   - text string
func (_e *CommentRepo_Expecter) CreateReplyComment(ctx interface{}, postID interface{}, userID interface{}, parentCommentID interface{}, text interface{}) *CommentRepo_CreateReplyComment_Call {
	return &CommentRepo_CreateReplyComment_Call{Call: _e.mock.On("CreateReplyComment", ctx, postID, userID, parentCommentID, text)}
}

func (_c *CommentRepo_CreateReplyComment_Call) Run(run func(ctx context.Context, postID models.PostID, userID models.UserID, parentCommentID models.CommentID, text string)) *CommentRepo_CreateReplyComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PostID), args[2].(models.UserID), args[3].(models.CommentID), args[4].(string))
	})
	return _c
}

func (_c *CommentRepo_CreateReplyComment_Call) Return(_a0 *models.Comment, _a1 error) *CommentRepo_CreateReplyComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentRepo_CreateReplyComment_Call) RunAndReturn(run func(context.Context, models.PostID, models.UserID, models.CommentID, string) (*models.Comment, error)) *CommentRepo_CreateReplyComment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoot provides a mock function with given fields: ctx, postID, userID, text
func (_m *CommentRepo) CreateRoot(ctx context.Context, postID models.PostID, userID models.UserID, text string) (*models.Comment, error) {
	ret := _m.Called(ctx, postID, userID, text)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoot")
	}

	var r0 *models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PostID, models.UserID, string) (*models.Comment, error)); ok {
		return rf(ctx, postID, userID, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PostID, models.UserID, string) *models.Comment); ok {
		r0 = rf(ctx, postID, userID, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PostID, models.UserID, string) error); ok {
		r1 = rf(ctx, postID, userID, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepo_CreateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoot'
type CommentRepo_CreateRoot_Call struct {
	*mock.Call
}

// CreateRoot is a helper method to define mock.On call
//   - ctx context.Context
//   - postID models.PostID
//   - userID models.UserID
//   - text string
func (_e *CommentRepo_Expecter) CreateRoot(ctx interface{}, postID interface{}, userID interface{}, text interface{}) *CommentRepo_CreateRoot_Call {
	return &CommentRepo_CreateRoot_Call{Call: _e.mock.On("CreateRoot", ctx, postID, userID, text)}
}

func (_c *CommentRepo_CreateRoot_Call) Run(run func(ctx context.Context, postID models.PostID, userID models.UserID, text string)) *CommentRepo_CreateRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PostID), args[2].(models.UserID), args[3].(string))
	})
	return _c
}

func (_c *CommentRepo_CreateRoot_Call) Return(_a0 *models.Comment, _a1 error) *CommentRepo_CreateRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentRepo_CreateRoot_Call) RunAndReturn(run func(context.Context, models.PostID, models.UserID, string) (*models.Comment, error)) *CommentRepo_CreateRoot_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CommentRepo) GetByID(ctx context.Context, id models.CommentID) (*models.Comment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CommentID) (*models.Comment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CommentID) *models.Comment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CommentID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type CommentRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id models.CommentID
func (_e *CommentRepo_Expecter) GetByID(ctx interface{}, id interface{}) *CommentRepo_GetByID_Call {
	return &CommentRepo_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *CommentRepo_GetByID_Call) Run(run func(ctx context.Context, id models.CommentID)) *CommentRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.CommentID))
	})
	return _c
}

func (_c *CommentRepo_GetByID_Call) Return(_a0 *models.Comment, _a1 error) *CommentRepo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentRepo_GetByID_Call) RunAndReturn(run func(context.Context, models.CommentID) (*models.Comment, error)) *CommentRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoots provides a mock function with given fields: ctx, postID, limit, lastID
func (_m *CommentRepo) ListRoots(ctx context.Context, postID models.PostID, limit int, lastID *models.CommentID) ([]*models.Comment, *models.CommentID, error) {
	ret := _m.Called(ctx, postID, limit, lastID)

	if len(ret) == 0 {
		panic("no return value specified for ListRoots")
	}

	var r0 []*models.Comment
	var r1 *models.CommentID
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PostID, int, *models.CommentID) ([]*models.Comment, *models.CommentID, error)); ok {
		return rf(ctx, postID, limit, lastID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PostID, int, *models.CommentID) []*models.Comment); ok {
		r0 = rf(ctx, postID, limit, lastID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PostID, int, *models.CommentID) *models.CommentID); ok {
		r1 = rf(ctx, postID, limit, lastID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.CommentID)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.PostID, int, *models.CommentID) error); ok {
		r2 = rf(ctx, postID, limit, lastID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CommentRepo_ListRoots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoots'
type CommentRepo_ListRoots_Call struct {
	*mock.Call
}

// ListRoots is a helper method to define mock.On call
//   - ctx context.Context
//   - postID models.PostID
//   - limit int
//   - lastID *models.CommentID
func (_e *CommentRepo_Expecter) ListRoots(ctx interface{}, postID interface{}, limit interface{}, lastID interface{}) *CommentRepo_ListRoots_Call {
	return &CommentRepo_ListRoots_Call{Call: _e.mock.On("ListRoots", ctx, postID, limit, lastID)}
}

func (_c *CommentRepo_ListRoots_Call) Run(run func(ctx context.Context, postID models.PostID, limit int, lastID *models.CommentID)) *CommentRepo_ListRoots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PostID), args[2].(int), args[3].(*models.CommentID))
	})
	return _c
}

func (_c *CommentRepo_ListRoots_Call) Return(_a0 []*models.Comment, _a1 *models.CommentID, _a2 error) *CommentRepo_ListRoots_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CommentRepo_ListRoots_Call) RunAndReturn(run func(context.Context, models.PostID, int, *models.CommentID) ([]*models.Comment, *models.CommentID, error)) *CommentRepo_ListRoots_Call {
	_c.Call.Return(run)
	return _c
}

// ListThreads provides a mock function with given fields: ctx, postID, firstCommentID, limit, lastID
func (_m *CommentRepo) ListThreads(ctx context.Context, postID models.PostID, firstCommentID models.CommentID, limit int, lastID *models.CommentID) ([]*models.Comment, *models.CommentID, error) {
	ret := _m.Called(ctx, postID, firstCommentID, limit, lastID)

	if len(ret) == 0 {
		panic("no return value specified for ListThreads")
	}

	var r0 []*models.Comment
	var r1 *models.CommentID
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PostID, models.CommentID, int, *models.CommentID) ([]*models.Comment, *models.CommentID, error)); ok {
		return rf(ctx, postID, firstCommentID, limit, lastID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PostID, models.CommentID, int, *models.CommentID) []*models.Comment); ok {
		r0 = rf(ctx, postID, firstCommentID, limit, lastID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PostID, models.CommentID, int, *models.CommentID) *models.CommentID); ok {
		r1 = rf(ctx, postID, firstCommentID, limit, lastID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.CommentID)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.PostID, models.CommentID, int, *models.CommentID) error); ok {
		r2 = rf(ctx, postID, firstCommentID, limit, lastID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CommentRepo_ListThreads_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListThreads'
type CommentRepo_ListThreads_Call struct {
	*mock.Call
}

// ListThreads is a helper method to define mock.On call
//   - ctx context.Context
//   - postID models.PostID
//   - firstCommentID models.CommentID
//   - limit int
//   - lastID *models.CommentID
func (_e *CommentRepo_Expecter) ListThreads(ctx interface{}, postID interface{}, firstCommentID interface{}, limit interface{}, lastID interface{}) *CommentRepo_ListThreads_Call {
	return &CommentRepo_ListThreads_Call{Call: _e.mock.On("ListThreads", ctx, postID, firstCommentID, limit, lastID)}
}

func (_c *CommentRepo_ListThreads_Call) Run(run func(ctx context.Context, postID models.PostID, firstCommentID models.CommentID, limit int, lastID *models.CommentID)) *CommentRepo_ListThreads_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PostID), args[2].(models.CommentID), args[3].(int), args[4].(*models.CommentID))
	})
	return _c
}

func (_c *CommentRepo_ListThreads_Call) Return(_a0 []*models.Comment, _a1 *models.CommentID, _a2 error) *CommentRepo_ListThreads_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CommentRepo_ListThreads_Call) RunAndReturn(run func(context.Context, models.PostID, models.CommentID, int, *models.CommentID) ([]*models.Comment, *models.CommentID, error)) *CommentRepo_ListThreads_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommentRepo creates a new instance of CommentRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentRepo {
	mock := &CommentRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
